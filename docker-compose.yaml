version: "3.9"

x-airflow-env: &airflow-env
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:${POSTGRES_PASSWORD}@db:5432/airflow
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
  AIRFLOW__CORE__LOAD_EXAMPLES: "False"
  AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.session,airflow.api.auth.backend.basic_auth
  AIRFLOW__WEBSERVER__AUTHENTICATE: "True"
  AIRFLOW__WEBSERVER__AUTH_BACKEND: airflow.contrib.auth.backends.password_auth
  AIRFLOW__CORE__DAG_DIR_LIST_INTERVAL: "30"

services:
  # 1) PostgreSQL (앱/에어플로우 공용)
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-dotodo}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # 2) (권한) Airflow 볼륨을 50000:0으로 고정
  airflow-perms:
    image: alpine:3.20
    user: "0:0"
    volumes:
      - ./airflow:/opt/airflow
    command: ["sh","-lc","mkdir -p /opt/airflow/{dags,logs,plugins} && chown -R 50000:0 /opt/airflow && chmod -R g+rwX /opt/airflow"]
    restart: "no"

  # 3) (DB 보장) airflow 데이터베이스 자동 생성
  db-init-airflow:
    image: postgres:15
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
    depends_on:
      db:
        condition: service_healthy
    command:
      - bash
      - -lc
      - |
        until pg_isready -h db -U "$POSTGRES_USER"; do sleep 1; done;
        psql -h db -U "$POSTGRES_USER" -tAc "SELECT 1 FROM pg_database WHERE datname='airflow'" | grep -q 1 \
          || psql -h db -U "$POSTGRES_USER" -c 'CREATE DATABASE airflow';
    restart: "no"

  # 4) Airflow 초기화: DB 마이그레이션만 수행
  airflow-init:
    image: apache/airflow:2.8.1-python3.11
    user: "${AIRFLOW_UID:-50000}:0"
    environment:
      <<: *airflow-env
    volumes:
      - ./airflow:/opt/airflow
    depends_on:
      db:
        condition: service_healthy
      airflow-perms:
        condition: service_completed_successfully
      db-init-airflow:
        condition: service_completed_successfully
    command: ["bash","-lc","set -euo pipefail; airflow db init"]
    restart: "no"

  # 5) Airflow 사용자 부트스트랩 (Admin 생성, 중복 안전)
  airflow-bootstrap:
    image: apache/airflow:2.8.1-python3.11
    user: "${AIRFLOW_UID:-50000}:0"
    environment:
      <<: *airflow-env
      AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD:-admin}
    volumes:
      - ./airflow:/opt/airflow
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command:
      - bash
      - -lc
      - |
        set -euo pipefail
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password ${AIRFLOW_ADMIN_PASSWORD:-admin} || echo "User already exists"
    restart: "no"

  # 6) Airflow Web UI (+ Stable REST API)
  airflow-webserver:
    image: apache/airflow:2.8.1-python3.11
    user: "${AIRFLOW_UID:-50000}:0"
    environment:
      <<: *airflow-env
      _PIP_ADDITIONAL_REQUIREMENTS: "apache-airflow-providers-postgres==5.7.1"
    volumes:
      - ./airflow:/opt/airflow
    ports:
      - "8080:8080"
    depends_on:
      airflow-bootstrap:
        condition: service_completed_successfully
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/health | grep -q healthy"]
      interval: 10s
      timeout: 5s
      retries: 12
    restart: unless-stopped

  # 7) Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.8.1-python3.11
    user: "${AIRFLOW_UID:-50000}:0"
    environment:
      <<: *airflow-env
      _PIP_ADDITIONAL_REQUIREMENTS: "apache-airflow-providers-postgres==5.7.1"
    volumes:
      - ./airflow:/opt/airflow
    depends_on:
      airflow-bootstrap:
        condition: service_completed_successfully
    command: scheduler
    restart: unless-stopped

  # 8) 앱 백엔드 (FastAPI)
  backend:
    build:
      context: ./backend
    env_file:
      - .env
    environment:
      AIRFLOW_BASE: ${AIRFLOW_BASE:-http://airflow-webserver:8080}
    depends_on:
      airflow-webserver:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    restart: unless-stopped

  # 9) dbt 분석 서비스
  dbt:
    build:
      context: ./dbt
      dockerfile: Dockerfile
    container_name: dotodo_dbt
    volumes:
      - ./dbt:/usr/app
    environment:
      - DBT_PROFILES_DIR=/root/.dbt
    depends_on:
      db:
        condition: service_healthy
    command: tail -f /dev/null
    restart: unless-stopped

  # 10) Streamlit 대시보드
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: dotodo_dashboard
    ports:
      - "8501:8501"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/dotodo
    restart: unless-stopped

volumes:
  pgdata:
